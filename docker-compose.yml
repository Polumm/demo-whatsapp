version: "3.8"

services:
  # ---------- Common Services ----------
  rabbitmq:
    image: rabbitmq:3.11-management
    container_name: rabbitmq
    restart: always
    ports:
      - "5672:5672"      # AMQP
      - "15672:15672"    # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:  # Add health check to ensure it's ready before starting chat services
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
  redis:
    image: redis:latest
    container_name: redis
    restart: always
    ports:
      - "6379:6379"

  # ---------- Auth-Service + DB ----------
  postgres-auth:
    image: postgres:latest
    container_name: postgres-auth
    restart: always
    environment:
      POSTGRES_USER: authuser
      POSTGRES_PASSWORD: authpass
      POSTGRES_DB: authdb
    ports:
      - "5433:5432"
    volumes:
      - postgres_auth_data:/var/lib/postgresql/data

  auth-service:
    build: ./auth-service
    container_name: auth-service
    restart: always
    depends_on:
      - postgres-auth
    environment:
      APP_ENV: development
      DATABASE_URL: postgresql://authuser:authpass@postgres-auth:5432/authdb
      ACCESS_SECRET_KEY: "access_secret_key"

  # ---------- Chat-Service + DB ----------
  postgres-chat:
    image: postgres:latest
    container_name: postgres-chat
    restart: always
    environment:
      POSTGRES_USER: chatuser
      POSTGRES_PASSWORD: chatpass
      POSTGRES_DB: chatdb
    ports:
      - "5434:5432"
    volumes:
      - postgres_chat_data:/var/lib/postgresql/data

  # >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
  # Two replicas of chat-service, each with unique NODE_ID
  # and different container name and port mapping
  # >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

  chat-service-1:
    build: ./chat-service
    container_name: chat-service-1
    restart: always
    depends_on:
      rabbitmq:
        condition: service_healthy  # ✅ Only RabbitMQ is checked for readiness
      redis:
        condition: service_started
      postgres-chat:
        condition: service_started
    environment:
      PYTHONUNBUFFERED: 1
      REDIS_HOST: redis
      REDIS_PORT: 6379
      RABBIT_HOST: rabbitmq
      RABBIT_PORT: 5672
      EXCHANGE_NAME: "chat-direct-exchange"
      NODE_ID: "node-1"
      DATABASE_URL: postgresql+asyncpg://chatuser:chatpass@postgres-chat:5432/chatdb

  chat-service-2:
    build: ./chat-service
    container_name: chat-service-2
    restart: always
    depends_on:
      rabbitmq:
        condition: service_healthy  # ✅ Only RabbitMQ is checked for readiness
      redis:
        condition: service_started
      postgres-chat:
        condition: service_started
    environment:
      PYTHONUNBUFFERED: 1
      REDIS_HOST: redis
      REDIS_PORT: 6379
      RABBIT_HOST: rabbitmq
      RABBIT_PORT: 5672
      EXCHANGE_NAME: "chat-direct-exchange"
      NODE_ID: "node-2"
      DATABASE_URL: postgresql+asyncpg://chatuser:chatpass@postgres-chat:5432/chatdb

  # ---------- Load Balancer (HAProxy) ----------
  haproxy-lb:
    image: haproxy:latest
    container_name: haproxy-lb
    restart: always
    ports:
      - "8080:8080"
    volumes:
      - ./haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    depends_on:
      - chat-service-1
      - chat-service-2
    environment:
      - LOG_LEVEL=debug
    command: ["haproxy", "-f", "/usr/local/etc/haproxy/haproxy.cfg", "-db"]

  # ---------- Gateway ----------
  gateway-service:
    build: ./gateway-service
    container_name: gateway-service
    restart: always
    environment:
      PYTHONUNBUFFERED: 1
      CHAT_SERVICE_URL: "haproxy-lb:8080"  # Load-balanced requests
      AUTH_SERVICE_URL: "auth-service:8003"
    ports:
      - "8001:8001"
    depends_on:
      - haproxy-lb

  # ---------- Presence-Service + DB ----------
  postgres-presence:
    image: postgres:latest
    container_name: postgres-presence
    restart: always
    environment:
      POSTGRES_USER: presenceuser
      POSTGRES_PASSWORD: presencepass
      POSTGRES_DB: presencedb
    ports:
      - "5435:5432"
    volumes:
      - postgres_presence_data:/var/lib/postgresql/data

  presence-service:
    build: ./presence-service
    container_name: presence-service
    restart: always
    depends_on:
      - postgres-presence
    environment:
      PYTHONUNBUFFERED: 1
      PRESENCE_DATABASE_URL: postgresql://presenceuser:presencepass@postgres-presence:5432/presencedb
    ports:
      - "8004:8004"

  # ---------- Persistence-service ----------
  persistence-service:
    build: ./persistence-service
    container_name: persistence-service
    restart: always
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_started
      postgres-chat:
        condition: service_started
    environment:
      PYTHONUNBUFFERED: 1
      RABBIT_HOST: rabbitmq
      RABBIT_PORT: 5672
      REDIS_HOST: redis
      REDIS_PORT: 6379
      DATABASE_URL: postgresql+asyncpg://chatuser:chatpass@postgres-chat:5432/chatdb

volumes:
  postgres_auth_data:
  postgres_chat_data:
  postgres_presence_data:
