version: "3.8"

services:
  rabbitmq:
    image: rabbitmq:3.11-management
    container_name: rabbitmq
    restart: always  # Ensure RabbitMQ restarts if it fails
    ports:
      - "5672:5672"      # AMQP
      - "15672:15672"    # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest

  redis:
    image: redis:latest
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
  
  postgres:
    image: postgres:latest
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: demo_whatsapp
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  gateway-service:
    build: ./gateway-service
    container_name: gateway-service
    restart: always
    environment:
      PYTHONUNBUFFERED: 1
      CHAT_SERVICE_URL: "chat-service:8002"
      AUTH_SERVICE_URL: "auth-service:8003"
    ports:
      - "8001:8001"

  chat-service:
    build: ./chat-service
    container_name: chat-service
    restart: always
    depends_on:
      - rabbitmq
      - redis
    environment:
      PYTHONUNBUFFERED: 1
      REDIS_HOST: redis
      REDIS_PORT: 6379
      RABBIT_HOST: rabbitmq
      RABBIT_PORT: 5672
      QUEUE_NAME: messages_queue
    # # Whether user can connect gateway-service directly
    # ports:
    #   - "8002:8002" 

  auth-service:
    build: ./auth-service
    container_name: auth-service
    restart: always
    depends_on:
      - postgres
    environment:
      APP_ENV: development
      DATABASE_URL: postgresql://user:password@postgres:5432/demo_whatsapp
      ACCESS_SECRET_KEY: "access_secret_key"
    # ports:
    #   - "8003:8003"

volumes:
  postgres_data:
